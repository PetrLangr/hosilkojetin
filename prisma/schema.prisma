// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  name          String?
  image         String?
  password      String?   // For credentials login
  captainPin    String?   // 4-6 digit PIN for team delegation (only for captains)
  accounts      Account[]
  sessions      Session[]
  playerId      String?   @unique
  player        Player?   @relation(fields: [playerId], references: [id])
  role          String    @default("viewer") // admin, kapitán, hráč, viewer
  posts         Post[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Season {
  id        String   @id @default(cuid())
  name      String
  startDate DateTime
  endDate   DateTime
  isActive  Boolean  @default(false)
  teams     Team[]
  matches   Match[]
  playerStats PlayerStats[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Team {
  id        String   @id @default(cuid())
  name      String
  shortName String
  city      String
  logoUrl   String?
  captain   Player?  @relation("CaptainOf", fields: [captainId], references: [id])
  captainId String?
  players   Player[]
  seasonId  String
  season    Season   @relation(fields: [seasonId], references: [id])
  homeMatches Match[] @relation("HomeTeam")
  awayMatches Match[] @relation("AwayTeam")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, seasonId])
}

model Player {
  id        String   @id @default(cuid())
  name      String
  nickname  String?
  photoUrl  String?
  role      String   // kapitán, hráč, náhradník
  teamId    String
  team      Team     @relation(fields: [teamId], references: [id])
  captainOf Team[]   @relation("CaptainOf")
  stats     PlayerStats[]
  gameEvents GameEvent[]
  user      User?    // Connection to auth user
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Match {
  id         String   @id @default(cuid())
  seasonId   String
  season     Season   @relation(fields: [seasonId], references: [id])
  fixtureId  String?
  homeTeamId String
  awayTeamId String
  homeTeam   Team     @relation("HomeTeam", fields: [homeTeamId], references: [id])
  awayTeam   Team     @relation("AwayTeam", fields: [awayTeamId], references: [id])
  games      Game[]
  startTime  DateTime?
  endTime    DateTime?
  result     Json?    // summary výsledků
  round      Int?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Game {
  id          String @id @default(cuid())
  matchId     String
  match       Match  @relation(fields: [matchId], references: [id])
  order       Int
  type        String // single, double_501, double_cricket, triple_301, tiebreak_701
  format      String // bo3, bo1_15rounds, bo1
  result      Json?
  participants Json   // pole playerId
  events      GameEvent[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model GameEvent {
  id      String @id @default(cuid())
  gameId  String
  game    Game   @relation(fields: [gameId], references: [id])
  playerId String
  player   Player @relation(fields: [playerId], references: [id])
  type    String // S95, S133, S170, CO3, CO4, CO5, CO6
  value   Int?
  createdAt DateTime @default(now())
}

model PlayerStats {
  id          String @id @default(cuid())
  playerId    String
  player      Player @relation(fields: [playerId], references: [id])
  seasonId    String
  season      Season @relation(fields: [seasonId], references: [id])
  singlesPlayed Int @default(0)
  singlesWon   Int @default(0)
  S95 Int @default(0)
  S133 Int @default(0)
  S170 Int @default(0)
  CO3 Int @default(0)
  CO4 Int @default(0)
  CO5 Int @default(0)
  CO6 Int @default(0)
  bpi Float @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([playerId, seasonId])
}

model Post {
  id          String   @id @default(cuid())
  title       String
  content     String
  excerpt     String?
  authorId    String
  author      User     @relation(fields: [authorId], references: [id])
  type        String   @default("news") // news, announcement, tournament, etc.
  published   Boolean  @default(false)
  pinned      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
